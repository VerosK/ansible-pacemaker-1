#!/usr/bin/python
# -*- coding: utf-8 -*-

# 2015 - Gaetan trellu (goldyfruit) - <gaetan.trellu@incloudus.com>

DOCUMENTATION = '''
---
module: pcs_constraint
'''

def pcs_command_exists(cmd):
    try:
        os.stat(cmd)
        return True
    except:
        return False

def pcs_svc_running(svc):
    try:
        ps = subprocess.Popen(['ps', 'faux'], stdout=subprocess.PIPE)
        grep = subprocess.Popen(['grep', svc, '-c'],
                            stdin=ps.stdout,
                            stdout=subprocess.PIPE)
        ps.stdout.close()
        output = grep.communicate()[0]
        ps.wait()

        if output == '1\n':
            return True
    except:
        return False

def main():
    module = AnsibleModule(
        argument_spec  = dict(
            command    = dict(choices=['order', 'location', 'colocation', 'rule']),
            name       = dict(required=True),
            options    = dict(required=False),
            force      = dict(default='no', required=False, choices=['yes', 'no']),
            operations = dict(required=False),
        ),
        supports_check_mode=True,
    )

    # Check if pcs command exists.
    cmd = pcs_command_exists('/usr/sbin/pcs')
    if cmd is not True:
        module.fail_json(msg="Unable to find the 'pcs' command... Please install the package.")

    # Check if Pacemaker is running.
    pacemaker_svc = pcs_svc_running('[p]acemakerd')
    if pacemaker_svc is not True and module.params['command'] != 'stop' and module.params['command'] != 'destroy':
        module.fail_json(msg="pacemakerd is not running...")

    # Check if Corosync is running.
    corosync_svc = pcs_svc_running('[c]orosync')
    if corosync_svc is not True and module.params['command'] != 'stop' and module.params['command'] != 'destroy':
        module.fail_json(msg="corosync is not running...")

    # Check if pcsd is running.
    pcsd_svc = pcs_svc_running('[p]csd start')
    if pcsd_svc is not True:
        module.fail_json(msg="pcsd is not running...")

    # Check if constraint already exists.
    cmd = "pcs constraint %(command)s show | grep %(name)s -c" % module.params
    rc, out, err = module.run_command(cmd)
    exists = (out is 1)

    if exists:
        module.exit_json(changed=False, msg="Resource already exists.")
    elif module.check_mode:
        module.exit_json(changed=True)

    # Validate and process command specific params.
    if module.params['command'] == 'order':
        #if not module.params.has_key('options'):
        #    module.fail_json(msg="Missing required arguments: options.")
        # Command template.
        if module.params.has_key('force'):
            cmd = 'pcs constraint %(command)s %(name)s --force'
        else:
            cmd = 'pcs constraint %(command)s %(name)s'
        # Process operations.
        if module.params.has_key('operations'):
            cmd += ' %(operations)s'
            operations = []
            for op in module.params['operations']:
                if op['action'] == 'none':
                    op['action'] = ''
                op['options'] = ' '.join(['%s %s' % (key, value) for (key, value) in op['options'].items()])
                operations.append('%(action)s %(options)s' % op)
            module.params['operations'] = ' '.join(operations)
        changed=True

#    elif module.params['command'] == 'master':
#        if not module.params.has_key('options'):
#            module.fail_json(msg="missing required arguments: options.")
#        # Command template.
#        cmd = 'pcs resource %(command)s %(ms_name)s %(resource_id)s %(options)s'

    # Process options.
    #if module.params.has_key('options'):
    #    options = module.params['options']
    #    options = ' '.join(['%s=%s' % (key, value) for (key, value) in options.items()])
    #    module.params['options'] = options

    # Run command.
    cmd = cmd % module.params
    rc, out, err = module.run_command(cmd)
    if rc is 1:
        module.fail_json(msg="Execution failed.\nCommand: `%s`\nError: %s" % (cmd, err))

    module.exit_json(changed=changed)

# import module snippets
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
